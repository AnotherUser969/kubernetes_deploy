pipeline {
    agent any;
    parameters {
         //credentials credentialType: 'org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl', defaultValue: '', description: 'SA_ACCESS_KEY (идентификатор ключа в облаке)', name: 'SA_ACCESS_KEY', required: true
  	     //credentials credentialType: 'org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl', defaultValue: '', description: 'SA_SECRET_KEY (секретный ключ в облаке)', name: 'SA_SECRET_KEY', required: true
  	     credentials credentialType: 'org.jenkinsci.plugins.plaincredentials.impl.FileCredentialsImpl', defaultValue: '', description: 'KEY_FILE (авторизованный ключ для сервисного аккаунта)', name: 'KEY_FILE', required: true
  	     credentials credentialType: 'com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey', defaultValue: '', description: 'SSH_KEY (ssh ключ и логин для созданный инстансов)', name: 'SSH_KEY', required: true  
  	     string description: 'ID сети, в которой будет находиться созданные ВМ', name: 'NETWORK_ID', trim: true
    }
    tools {
         terraform "terraform"
    }
    stages {
        stage('Init') {
            steps {
              sh label: '', script: 'cp ./infrastructure/terraform/.terraformrc ~/.terraformrc'
              sh label: '', script: 'terraform -chdir="./infrastructure/terraform" init -no-color'
            }
        }
        stage('Plan') {
             steps {
               withCredentials([file(credentialsId: 'KEY_FILE', variable: 'SERVICE_ACCOUNT_KEY_FILE')]) {
	                    sh label: '', script: 'terraform -chdir="./infrastructure/terraform" plan -var="service_account_key_file=$SERVICE_ACCOUNT_KEY_FILE" -var="network_id=NETWORK_ID" -no-color'
                }
             }
        }
        stage('Validate Apply') {
              input {
                  message "Do you want to apply this plan?"
                  ok "Apply plan"
              }
              steps {
                   sh label: '', script: 'echo Apply accepted'
              }
        }
        stage('Apply') {
	       steps {
                   withCredentials([file(credentialsId: 'KEY_FILE', variable: 'SERVICE_ACCOUNT_KEY_FILE')]) {
                       sh label: '', script: 'terraform -chdir="./infrastructure/terraform" apply -var="service_account_key_file=$SERVICE_ACCOUNT_KEY_FILE" -var="network_id=$NETWORK_ID" -auto-approve -no-color'
                   }   
	       }
        }
        stage('Generate host file') {
               steps {
		    sh label: '', script: 'sleep 8'
                    sh label: '', script: 'bash ./infrastructure/scripts/generate_host_file.sh'
               }
        }
        stage('Configure cluster servers') {
               steps {
                    ansiblePlaybook become: true, credentialsId: 'SSH_KEY', disableHostKeyChecking: true, inventory: './hosts', playbook: './infrastructure/ansible/playbook.yml'
               }
        }
        stage('Run kubernetes cluster') {
               steps {
                    sh label: '', script: '''
                    bash ./infrastructure/scripts/run_kubernetes_cluster.sh \
                    -mfn "terraform -chdir="./infrastructure/terraform" output -json | jq -r '.masters_ips.value.internal[][]' | head -n 1" \
                    -mons "terraform -chdir="./infrastructure/terraform" output -json | jq -r '.masters_ips.value.internal[][]' | tail -n +2" \
                    -wnd "terraform -chdir="./infrastructure/terraform" output -json | jq -r '.workers_ips.value.internal[][]'"
                    '''
               }
        }
    }
}
