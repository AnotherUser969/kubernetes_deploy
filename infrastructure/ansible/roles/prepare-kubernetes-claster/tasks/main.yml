---
# tasks file for prepare-kubernetes-claster

        - name: Install utils for all
          apt:
             name: "{{ item }}"
             state: present
             update_cache: yes
          with_items:
              - apt-transport-https
              - ca-certificates
              - curl

        - name: PKGs for workers
          apt:
             name: "{{ item }}"
             state: present
             update_cache: yes
          loop:
              - gnupg
              - iptables
          when: "'workers' in group_names"

        - name: PKGs for masters
          apt:
            name: "{{ item }}"
            state: present
            update_cache: yes
          loop:
             - keepalived
             - haproxy
          when: "'masters' in group_names"

        - name: Touch file for kernel modules boot
          file:
             path: /etc/modules-load.d/k8s.conf
             owner: user
             group: user
             mode: 0755
             state: touch

        - name: Add kernel modules in conf file
          lineinfile:
             dest: /etc/modules-load.d/k8s.conf
             line: "{{ item }}"
          with_items:
             - overlay
             - br_netfilter

        - name: Add modprobe
          modprobe:
            name: "{{ item }}"
            state: present
          with_items:
             - overlay
             - br_netfilter

        - name: Touch file for kernel setting
          file:
             path: /etc/sysctl.d/k8s.conf
             owner: user
             group: user
             mode: 0755
             state: touch

        - name: Add kernel settings to conf file
          lineinfile:
             dest: /etc/sysctl.d/k8s.conf
             line: "{{ item }}"
          with_items:
              - net.bridge.bridge-nf-call-ip6tables = 1
              - net.bridge.bridge-nf-call-iptables = 1

        - name: Add kubernetes official GPG key
          apt_key:
              url: https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key
              keyring: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
              state: present

        - name: Set up the kubernetes repository
          apt_repository:
              repo: 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /'
              state: present
              filename: /etc/apt/sources.list.d/kubernetes.list

        - name: Install kubernetes utils
          apt:
             name: "{{ item }}"
             state: present
             update_cache: yes
             allow_change_held_packages: true
          loop:
             - kubelet
             - kubeadm
             - kubectl

        - name: Add Docker's official GPG key
          apt_key:
              url: https://download.docker.com/linux/ubuntu/gpg
              keyring: /etc/apt/keyrings/docker.gpg
              state: present

        - name: Set up the Docker repository
          apt_repository:
              repo: 'deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable'
              state: present
              filename: /etc/apt/sources.list.d/docker

        - name: Install Docker
          apt:
              name: "{{ item }}"
              state: present
              update_cache: yes
          loop:
               - docker-ce
               - docker-ce-cli
               - containerd.io
               - docker-buildx-plugin
               - docker-compose-plugin

        - name: Download and unzip cri-dockerd
          unarchive:
               src: "https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.4/cri-dockerd-0.3.4.amd64.tgz"
               dest: /tmp/
               remote_src: true
               validate_certs: false

        - name: Copy cri-dockerd to /usr/local/bin
          copy:
               src: "/tmp/cri-dockerd/cri-dockerd"
               dest: "/usr/local/bin/cri-dockerd"
               owner: root
               group: root
               remote_src: true
               mode: 0755

        - name: Remove directory
          file:
               path: "/tmp/cri-dockerd/"
               state: absent

        - name: Download cri-docker.service
          get_url:
               url: "https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/cri-docker.service"
               dest: /tmp/
               owner: user
               group: user
               mode: 0600
               validate_certs: false

        - name: Download cri-docker.socket
          get_url:
                url: https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/cri-docker.socket
                dest: /tmp/
                owner: user
                group: user
                mode: 0600
                validate_certs: false

        - name: Copy cri-docker socket and service to /etc/systemd/system
          copy:
                src: '/tmp/{{ item }}'
                dest: "/etc/systemd/system/"
                owner: root
                group: root
                remote_src: true
                mode:
          loop:
                - cri-docker.socket
                - cri-docker.service

        - name: Replace the cri-dockerd dir in cri-docker.service
          shell: sed -i -e 's,/usr/bin/cri-dockerd,/usr/local/bin/cri-dockerd,' /etc/systemd/system/cri-docker.service

        - name: Create cri-docker.service enable
          systemd:
                name: cri-docker.service
                state: started
                enabled: true
                daemon_reload: true

        - name: Copy keepalived.conf and check_apiserver.sh to masters
          copy:
                src: "{{ item }}"
                dest: '/etc/keepalived/'
                owner: user
                group: user
                mode: 0700
          loop:
                - 'keepalived.conf'
                - 'check_apiserver.sh'
          when: "'masters' in group_names"

        - name: Create keepalived service enable
          systemd:
                name: keepalived.service
                state: started
                enabled: true

        - name: Copy j2 template with haproxy conf
          template:
                src: 'haproxy.cfg.j2'
                dest: '/etc/haproxy/haproxy.cfg'
                owner: user
                group: user
                mode: 0700

        - name: Create haproxy service enable
          systemd:
                name: haproxy.service
                service: started
                enabled: true
